[
    {
        "id": "1e78c2098878e540",
        "type": "tab",
        "label": "Odczyt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6de31ff16789035c",
        "type": "tab",
        "label": "Symulator Siłownika",
        "disabled": false,
        "info": ""
    },
    {
        "id": "85249515dfc449d5",
        "type": "tab",
        "label": "Termostat",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed392b0a7f59b9ad",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2a13aec920287264",
        "type": "modbus-client",
        "name": "usb-conn",
        "clienttype": "simpleser",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "115200",
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 2,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "aa396a8b9bffcdde",
        "type": "ui_group",
        "name": "Main",
        "tab": "",
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "557c76555cf781ce",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b9294cc7665a6f87",
        "type": "ui_tab",
        "name": "Tab 1",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b6f19b7ee6bab273",
        "type": "ui_tab",
        "name": "Tab 2",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "858b321a4adff43b",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "dashboard_tab",
        "type": "ui_tab",
        "name": "CO",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "dashboard_group",
        "type": "ui_group",
        "name": "Symulacja",
        "tab": "dashboard_tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2c8e29558bef67fc",
        "type": "function",
        "z": "1e78c2098878e540",
        "name": "TempCO-extract",
        "func": "msg.payload = msg.payload.data[5] / 10;\nmsg.topic = \"TempCO\";\n// msg.timestamp = new Date().toString();\n// msg.timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);\nmsg.timestamp = new Intl.DateTimeFormat('pl-PL', {\n  hour: '2-digit', minute: '2-digit', second: '2-digit',\n  year: 'numeric', month: '2-digit', day: '2-digit',\n  hour12: false\n}).format(new Date()).replace(',', '');\n\nflow.set(\"tempco\", msg.payload);\n\nnode.status({\n  fill: \"blue\",\n  shape: \"ring\",\n  text: `TempCO: ${msg.payload} °C | Time: ${msg.timestamp}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "c03008d7c7b1400a"
            ]
        ]
    },
    {
        "id": "af5c63dab0f87aba",
        "type": "function",
        "z": "1e78c2098878e540",
        "name": "Pozycja-extract",
        "func": "msg.volt = msg.payload.data[0];\nmsg.payload = msg.payload.data[0] / 1000;\nmsg.topic = \"Pozycja\";\nmsg.timestamp = new Intl.DateTimeFormat('pl-PL', {\n  hour: '2-digit', minute: '2-digit', second: '2-digit',\n  year: 'numeric', month: '2-digit', day: '2-digit',\n  hour12: false\n}).format(new Date()).replace(',', '');\n\nflow.set(\"pozycja\", msg.payload);\n\nnode.status({\n  fill: \"blue\",\n  shape: \"dot\",\n  text: `Pozycja: ${msg.payload} °C | Time: ${msg.timestamp}`\n});\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "bd09d6777578e0a1"
            ]
        ]
    },
    {
        "id": "54eedb2aa9a6fc18",
        "type": "function",
        "z": "1e78c2098878e540",
        "name": "TempZEW-extract",
        "func": "msg.payload = msg.payload.data[4] / 10;\nmsg.topic = \"TempZEW\";\nmsg.timestamp = new Intl.DateTimeFormat('pl-PL', {\n  hour: '2-digit', minute: '2-digit', second: '2-digit',\n  year: 'numeric', month: '2-digit', day: '2-digit',\n  hour12: false\n}).format(new Date()).replace(',', '');\n\nflow.set(\"tempzew\", msg.payload);\n\nnode.status({\n  fill: \"blue\",\n  shape: \"ring\",\n  text: `TempZEW: ${msg.payload} °C | Time: ${msg.timestamp}`\n});\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 40,
        "wires": [
            [
                "9d6f3c55beed1de2"
            ]
        ]
    },
    {
        "id": "9d6f3c55beed1de2",
        "type": "data-view",
        "z": "1e78c2098878e540",
        "name": "",
        "property": "payload",
        "fieldType": "msg",
        "width": "600",
        "height": 160,
        "points": "40",
        "active": true,
        "passthru": false,
        "hide": true,
        "outputs": 0,
        "x": 870,
        "y": 40,
        "wires": []
    },
    {
        "id": "c03008d7c7b1400a",
        "type": "data-view",
        "z": "1e78c2098878e540",
        "name": "",
        "property": "payload",
        "fieldType": "msg",
        "width": "600",
        "height": 160,
        "points": "40",
        "active": true,
        "passthru": false,
        "hide": true,
        "outputs": 0,
        "x": 870,
        "y": 260,
        "wires": []
    },
    {
        "id": "bd09d6777578e0a1",
        "type": "data-view",
        "z": "1e78c2098878e540",
        "name": "",
        "property": "payload",
        "fieldType": "msg",
        "width": "600",
        "height": 160,
        "points": "40",
        "active": true,
        "passthru": false,
        "hide": true,
        "outputs": 0,
        "x": 870,
        "y": 480,
        "wires": []
    },
    {
        "id": "b518a86b021392a6",
        "type": "modbus-flex-getter",
        "z": "1e78c2098878e540",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "2a13aec920287264",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 350,
        "y": 420,
        "wires": [
            [
                "c4a03ebdf905a40b",
                "5ff0f91f6c0b0887",
                "38b9777b50d3c0cf"
            ],
            [
                "c1fea26965fc587b"
            ]
        ]
    },
    {
        "id": "e5317afdda80f861",
        "type": "function",
        "z": "1e78c2098878e540",
        "name": "function 1",
        "func": "msg.payload = { \n    'fc': 3, \n    'unitid': 2, \n    'address': 100, \n    'quantity': 19 \n} \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 540,
        "wires": [
            [
                "b518a86b021392a6"
            ]
        ]
    },
    {
        "id": "c1fea26965fc587b",
        "type": "function",
        "z": "1e78c2098878e540",
        "name": "function 2",
        "func": "msg.payload = [msg.payload[0], msg.payload[1],msg.payload[18] ];\n\nflow.set(\"plc100\", msg.payload[0]);\nflow.set(\"plc101\", msg.payload[1]);\nflow.set(\"plc118\", msg.payload[18]);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "01eebfdfebd03d7d"
            ]
        ]
    },
    {
        "id": "01eebfdfebd03d7d",
        "type": "debug",
        "z": "1e78c2098878e540",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 620,
        "wires": []
    },
    {
        "id": "c4a03ebdf905a40b",
        "type": "debug",
        "z": "1e78c2098878e540",
        "name": "118",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload[18]",
        "targetType": "msg",
        "statusVal": "payload[18]",
        "statusType": "auto",
        "x": 630,
        "y": 500,
        "wires": []
    },
    {
        "id": "5ff0f91f6c0b0887",
        "type": "debug",
        "z": "1e78c2098878e540",
        "name": "101",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload[1]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 630,
        "y": 440,
        "wires": []
    },
    {
        "id": "38b9777b50d3c0cf",
        "type": "debug",
        "z": "1e78c2098878e540",
        "name": "100",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 630,
        "y": 380,
        "wires": []
    },
    {
        "id": "0eccd18fcd4a9b44",
        "type": "modbus-write",
        "z": "1e78c2098878e540",
        "name": "Off Simple PLC Program 118",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "118",
        "quantity": "1",
        "server": "2a13aec920287264",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 700,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a2f8f9231c0240da",
        "type": "inject",
        "z": "1e78c2098878e540",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "0eccd18fcd4a9b44",
                "b4a5c6b9a8798535"
            ]
        ]
    },
    {
        "id": "b4a5c6b9a8798535",
        "type": "modbus-write",
        "z": "1e78c2098878e540",
        "name": "Off Simple PLC Program 100",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "100",
        "quantity": "1",
        "server": "2a13aec920287264",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "daa70b52f74fd2b4",
        "type": "inject",
        "z": "1e78c2098878e540",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "0eccd18fcd4a9b44"
            ]
        ]
    },
    {
        "id": "86ef01d5251463e9",
        "type": "thingspeak42",
        "z": "1e78c2098878e540",
        "name": "",
        "delay": "15",
        "topic1": "TempZew",
        "topic2": "TempCO",
        "topic3": "Pozycja",
        "topic4": "Task100",
        "topic5": "Task101",
        "topic6": "Task118",
        "topic7": "",
        "topic8": "",
        "endpoint": "https://thingspeak.com",
        "x": 1190,
        "y": 880,
        "wires": []
    },
    {
        "id": "b98d17300e10168b",
        "type": "inject",
        "z": "1e78c2098878e540",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "TempZew",
        "payload": "20",
        "payloadType": "num",
        "x": 490,
        "y": 880,
        "wires": [
            [
                "86ef01d5251463e9"
            ]
        ]
    },
    {
        "id": "15ecc044141f4de3",
        "type": "inject",
        "z": "1e78c2098878e540",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "1ed0b6215f176b54",
        "type": "delay",
        "z": "1e78c2098878e540",
        "name": "",
        "pauseType": "rate",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "15",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "a3d43e6609be7e87",
        "type": "modbus-read",
        "z": "1e78c2098878e540",
        "name": "PLC-READ",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "4",
        "quantity": "6",
        "rate": "15",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "2a13aec920287264",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 40,
        "wires": [
            [],
            [
                "54eedb2aa9a6fc18",
                "2c8e29558bef67fc",
                "af5c63dab0f87aba"
            ]
        ]
    },
    {
        "id": "44b4420a6ffe2a33",
        "type": "inject",
        "z": "1e78c2098878e540",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "e5317afdda80f861"
            ]
        ]
    },
    {
        "id": "53fa855dc695dd45",
        "type": "modbus-read",
        "z": "1e78c2098878e540",
        "name": "PLC-READ",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "100",
        "quantity": "19",
        "rate": "15",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "3",
        "server": "2a13aec920287264",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 220,
        "wires": [
            [],
            [
                "097df399214566b1"
            ]
        ]
    },
    {
        "id": "097df399214566b1",
        "type": "function",
        "z": "1e78c2098878e540",
        "name": "PLC100",
        "func": "msg.payload = msg.payload.data[0];\nmsg.topic = \"plc100\";\nmsg.timestamp = new Intl.DateTimeFormat('pl-PL', {\n  hour: '2-digit', minute: '2-digit', second: '2-digit',\n  year: 'numeric', month: '2-digit', day: '2-digit',\n  hour12: false\n}).format(new Date()).replace(',', '');\n\nflow.set(\"plc100\", msg.payload);\n\nnode.status({\n  fill: \"blue\",\n  shape: \"ring\",\n  text: `PLC100: ${msg.payload} °C | Time: ${msg.timestamp}`\n});\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "451c143bbd7fccc9",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Co 5 sek",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "2560ccc065e5b1fc"
            ]
        ]
    },
    {
        "id": "2560ccc065e5b1fc",
        "type": "function",
        "z": "6de31ff16789035c",
        "name": "Symulacja temperatury CO",
        "func": "// Aktualna temperatura\nlet temp = flow.get(\"sym_temp\") || 20.0;\n\n// Pozycja zaworu (0–10000)\nlet pos = flow.get(\"zawor_pozycja\") || 0;\nlet posFraction = Math.min(Math.max(pos / 10000, 0), 1);\n\n// Stan pompy\nlet pompaOn = flow.get(\"pompa_stan\") === true;\n\n// Parametry\nlet heatingMaxRatePerMin = 10.0;   // szybki wzrost temp (pompa OFF, zawór otwarty)\nlet heatingRateWithPump = 0.3;     // wolniejsze grzanie przy pompie ON\nlet coolingRatePassive = -0.05;    // chłodzenie bez pompy, zawór zamknięty\nlet coolingRateActive = -10.0;     // chłodzenie z pompą i zaworem zamkniętym\n\n// Krok symulacji\nlet stepSec = 5;\nlet stepFrac = stepSec / 60;\n\nlet deltaPerStep;\n\nif (pos === 0) {\n    // Zawór całkowicie zamknięty → spadek temp\n    deltaPerStep = (pompaOn ? coolingRateActive : coolingRatePassive) * stepFrac;\n} else if (pos < 2000) {\n    // Małe otwarcie zaworu — szybkie chłodzenie jak przy zamkniętym\n    deltaPerStep = (pompaOn ? coolingRateActive : coolingRatePassive) * stepFrac;\n} else {\n    // Zawór bardziej otwarty — interpolacja grzania/chłodzenia\n    if (!pompaOn) {\n        deltaPerStep = heatingMaxRatePerMin * posFraction * stepFrac;\n    } else {\n        let coolingBase = coolingRatePassive;\n        deltaPerStep = (coolingBase + (heatingRateWithPump - coolingBase) * posFraction) * stepFrac;\n    }\n}\n\n// Nowa temperatura\nlet newTemp = temp + deltaPerStep;\n\n// Ograniczenia temperatury\nif (newTemp > 70) newTemp = 70;\nif (newTemp < 15) newTemp = 15;\n\nflow.set(\"sym_temp\", newTemp);\n\nnode.status({\n  fill: \"blue\",\n  shape: \"ring\",\n  text: `Temp: ${newTemp.toFixed(2)} °C | ΔT: ${deltaPerStep.toFixed(3)} °C`\n});\n\nmsg.payload = parseFloat(newTemp.toFixed(2));\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 40,
        "wires": [
            [
                "aabff1b06eb75c20",
                "a1d39d792e220805"
            ]
        ]
    },
    {
        "id": "70eadfcba4c536ed",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Ustaw zawór 4000",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "4000",
        "payloadType": "num",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "59062f0b0ae01ac1"
            ]
        ]
    },
    {
        "id": "59062f0b0ae01ac1",
        "type": "function",
        "z": "6de31ff16789035c",
        "name": "Zapisz pozycję zaworu",
        "func": "flow.set(\"zawor_pozycja\", msg.payload);\n\n// Status na flow z dodatkowymi informacjami\nnode.status({\n  fill: \"blue\",\n  shape: \"ring\",\n  text: `Zawór: ${msg.payload}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n// Code added here will be run once\n// whenever the node is started.\nlet zawor = flow.get(\"zawor_pozycja\")\n\n\nnode.status({\n    fill: \"blue\",\n    shape: \"ring\",\n    text: `Zawór: ${zawor}`\n});",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "aabff1b06eb75c20"
            ]
        ]
    },
    {
        "id": "aabff1b06eb75c20",
        "type": "debug",
        "z": "6de31ff16789035c",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "134fa4630f650662",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Ustaw zawór 0%",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "59062f0b0ae01ac1"
            ]
        ]
    },
    {
        "id": "0b8f6c1f46eb226d",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Ustaw zawór 10000",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "10000",
        "payloadType": "num",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "59062f0b0ae01ac1"
            ]
        ]
    },
    {
        "id": "a1d39d792e220805",
        "type": "data-view",
        "z": "6de31ff16789035c",
        "name": "Tabela historii",
        "property": "payload",
        "fieldType": "msg",
        "width": "400",
        "height": "200",
        "points": "40",
        "active": true,
        "passthru": false,
        "hide": false,
        "outputs": 0,
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "513cb550c91c5d9b",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Ustaw zawór 2000",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "2000",
        "payloadType": "num",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "59062f0b0ae01ac1"
            ]
        ]
    },
    {
        "id": "beb4bd7500b0dde2",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Ustaw zawór 1000",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "1000",
        "payloadType": "num",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "59062f0b0ae01ac1"
            ]
        ]
    },
    {
        "id": "a908e1f3f5acb6d7",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "b510f327b47c6c1c"
            ]
        ]
    },
    {
        "id": "b510f327b47c6c1c",
        "type": "function",
        "z": "6de31ff16789035c",
        "name": "PompaOn",
        "func": "flow.set(\"pompa_stan\", msg.payload);\n\n// Status na flow z dodatkowymi informacjami\nnode.status({\n  fill: \"blue\",\n  shape: \"ring\",\n  text: `Pompa: ${msg.payload}`\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet pompaOn = flow.get(\"pompa_stan\")\n\nif (pompaOn === undefined ){\n    pompaOn = true\n}\n\nnode.status({\n    fill: \"blue\",\n    shape: \"ring\",\n    text: `Pompa: ${pompaOn}`\n});",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f8f88274f40abeea",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "b510f327b47c6c1c"
            ]
        ]
    },
    {
        "id": "77507b6c42a02f35",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Ustaw zawór 5000",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5000",
        "payloadType": "num",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "59062f0b0ae01ac1"
            ]
        ]
    },
    {
        "id": "d8e13ad596364938",
        "type": "inject",
        "z": "6de31ff16789035c",
        "name": "Ustaw zawór 6000",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "6000",
        "payloadType": "num",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "59062f0b0ae01ac1"
            ]
        ]
    },
    {
        "id": "ed8026417287c70c",
        "type": "modbus-write",
        "z": "85249515dfc449d5",
        "name": "Pos-SET",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "4",
        "quantity": "1",
        "server": "2a13aec920287264",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 280,
        "y": 40,
        "wires": [
            [],
            [
                "243b35468db52ac4"
            ]
        ]
    },
    {
        "id": "bf71e8624b4cf66c",
        "type": "inject",
        "z": "85249515dfc449d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2000",
        "payloadType": "num",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "ed8026417287c70c"
            ]
        ]
    },
    {
        "id": "243b35468db52ac4",
        "type": "debug",
        "z": "85249515dfc449d5",
        "name": "debug poz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 40,
        "wires": []
    },
    {
        "id": "temp_ext",
        "type": "inject",
        "z": "ed392b0a7f59b9ad",
        "name": "Temperatura zewnętrzna",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "6",
        "payloadType": "num",
        "x": 230,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "logic",
        "type": "function",
        "z": "ed392b0a7f59b9ad",
        "name": "Sterowanie siłownikiem",
        "func": "let tempOut = msg.payload.temp_out;\nlet tempCO = msg.payload.temp_co;\nlet valveActual = msg.payload.valve_feedback || 0;\n\nlet targetTemp;\nlet valveCmd;\nlet pumpState;\n\nif (tempOut >= 12) {\n    targetTemp = 0;\n    valveCmd = 0;\n    pumpState = \"OFF\";\n} else {\n    // krzywa grzewcza\n    if (tempOut <= 0) targetTemp = 50;\n    else if (tempOut <= 5) {\n        targetTemp = 50 - (tempOut / 5) * 3;\n    } else if (tempOut <= 10) {\n        targetTemp = 47 - ((tempOut - 5) / 5) * 5;\n    } else {\n        targetTemp = 42;\n    }\n\n    // regulacja P\n    let errorTemp = targetTemp - tempCO;\n    if (Math.abs(errorTemp) < 0.5) errorTemp = 0;\n\n    let Kp = 300;\n    let deltaCmd = errorTemp * Kp;\n\n    let lastCmd = flow.get(\"last_valve_cmd\") || valveActual;\n\n    let maxDelta = 1000;\n    if (deltaCmd > maxDelta) deltaCmd = maxDelta;\n    if (deltaCmd < -maxDelta) deltaCmd = -maxDelta;\n\n    valveCmd = Math.max(0, Math.min(10000, lastCmd + deltaCmd));\n    pumpState = \"ON\";\n}\n\nflow.set(\"last_valve_cmd\", valveCmd);\n\nlet valveError = Math.abs(valveCmd - valveActual);\nlet warn = \"\";\nif (valveError > 1500 && pumpState === \"ON\") {\n    warn = \"⚠ Siłownik nie osiąga pozycji\";\n}\n\n// ➕ Status w edytorze Node-RED\nnode.status({\n    fill: pumpState === \"ON\" ? \"green\" : \"grey\",\n    shape: warn ? \"ring\" : \"dot\",\n    text: `Tzew: ${tempOut}°C | TCO: ${tempCO}°C → doc: ${targetTemp.toFixed(1)}°C | Sił: ${Math.round(valveCmd)}/${valveActual} | Pompa: ${pumpState}`\n});\n\n// Wyjścia\nreturn [\n    { payload: Math.round(valveCmd) },\n    { payload: pumpState },\n    { payload: targetTemp },\n    { payload: warn }\n];\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            [
                "debug_valve"
            ],
            [
                "debug_pump"
            ],
            [
                "debug_temp"
            ]
        ]
    },
    {
        "id": "debug_valve",
        "type": "debug",
        "z": "ed392b0a7f59b9ad",
        "name": "Siłownik (0–10000)",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1090,
        "y": 60,
        "wires": []
    },
    {
        "id": "debug_pump",
        "type": "debug",
        "z": "ed392b0a7f59b9ad",
        "name": "Pompa (ON/OFF)",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1090,
        "y": 140,
        "wires": []
    },
    {
        "id": "debug_temp",
        "type": "debug",
        "z": "ed392b0a7f59b9ad",
        "name": "Docelowa temp. CO",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1100,
        "y": 220,
        "wires": []
    },
    {
        "id": "inject_test",
        "type": "inject",
        "z": "ed392b0a7f59b9ad",
        "name": "Test wejść",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temp_out\": 3, \"temp_co\": 44, \"valve_feedback\": 3200}",
        "payloadType": "json",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "logic"
            ]
        ]
    },
    {
        "id": "inject_cyclic",
        "type": "inject",
        "z": "ed392b0a7f59b9ad",
        "name": "Cykliczne dane (symulacja)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "{\"temp_out\": 3, \"temp_co\": 44, \"valve_feedback\": 3200}",
        "payloadType": "json",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "logic"
            ]
        ]
    }
]